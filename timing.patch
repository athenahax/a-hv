--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@ -1665,6 +1665,7 @@
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_EFER);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_PAT);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_PERF_GLOBAL_CTRL);
+	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_TSC_AUX);
 
 	/*
 	 * Enable VM-exit on instruction execution.
@@ -1674,6 +1675,7 @@
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_ACK_INTERRUPT_ON_EXIT);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_CLEAR_BNDCFGS);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_CLEAR_IA32_RT_MAX_PHYS);
+	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL);
 
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_HLT_EXITING);
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_INVLPG_EXITING);
@@ -1683,6 +1685,7 @@
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_USE_IO_BITMAPS);
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_MONITOR_EXITING);
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_PAUSE_EXITING);
+	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_RDTSC_EXITING);
 
 	vmx_set_ctl(vmx, PIN_BASED_VM_EXEC_CONTROLS, PIN_BASED_EXT_INTR_MASK);
 	vmx_set_ctl(vmx, PIN_BASED_VM_EXEC_CONTROLS, PIN_BASED_NMI_EXITING);
@@ -1728,6 +1731,7 @@
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_EFER);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_PAT);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_PERF_GLOBAL_CTRL);
+	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_HOST_IA32_TSC_AUX);
 
 	/*
 	 * Enable VM-exit on instruction execution.
@@ -1737,6 +1741,7 @@
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_ACK_INTERRUPT_ON_EXIT);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_CLEAR_BNDCFGS);
 	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_CLEAR_IA32_RT_MAX_PHYS);
+	vmx_set_ctl(vmx, VM_EXIT_CONTROLS, VM_EXIT_LOAD_IA32_PERF_GLOBAL_CTRL);
 
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_HLT_EXITING);
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_INVLPG_EXITING);
@@ -1746,6 +1751,7 @@
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_USE_IO_BITMAPS);
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_MONITOR_EXITING);
 	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_PAUSE_EXITING);
+	vmx_set_ctl(vmx, CPU_BASED_VM_EXEC_CONTROLS, CPU_BASED_RDTSC_EXITING);
 
 	vmx_set_ctl(vmx, PIN_BASED_VM_EXEC_CONTROLS, PIN_BASED_EXT_INTR_MASK);
 	vmx_set_ctl(vmx, PIN_BASED_VM_EXEC_CONTROLS, PIN_BASED_NMI_EXITING);
@@ -4679,6 +4685,27 @@
 	return r;
 }
 
+static int handle_rdtsc_exit(struct kvm_vcpu *vcpu)
+{
+	u64 differece;
+	u64 final_time;
+	u64 data;
+
+	differece = rdtsc() - vcpu->last_exit_start;
+	final_time = vcpu->total_exit_time + differece;
+
+	data = rdtsc() - final_time;
+
+	vcpu->arch.regs[VCPU_REGS_RAX] = data & -1u;
+	vcpu->arch.regs[VCPU_REGS_RDX] = (data >> 32) & -1u;
+
+	vcpu->run->exit_reason = 123;
+
+	kvm_skip_emulated_instruction(vcpu);
+
+	return 1;
+}
+
 static int handle_cpuid(struct kvm_vcpu *vcpu)
 {
 	vcpu->run->exit_reason = 123;
@@ -4700,6 +4727,7 @@
 	case EXIT_REASON_WBINVD:
 		r = handle_wbinvd(vcpu);
 		break;
+	case EXIT_REASON_RDTSC:
+		r = handle_rdtsc_exit(vcpu);
+		break;
 	default:
 		r = -1;
 		break;
@@ -4763,6 +4791,24 @@
 	return r;
 }
 
+static int vcpu_enter_guest(struct kvm_vcpu *vcpu)
+{
+	int result;
+	u64 differece;
+
+	vcpu->last_exit_start = rdtsc();
+
+	result = vcpu_enter_guest_real(vcpu);
+
+	if (vcpu->run->exit_reason == 123)
+	{
+		differece = rdtsc() - vcpu->last_exit_start;
+		vcpu->total_exit_time += differece;
+	}
+
+	return result;
+}
+
 static int vcpu_block(struct kvm *kvm, struct kvm_vcpu *vcpu)
 {
 	if (!kvm_arch_vcpu_runnable(vcpu) &&
